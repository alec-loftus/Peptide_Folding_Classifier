# -*- coding: utf-8 -*-
"""KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ise7rqtbX54IJfbHKJu6XpW0_R5yhJzj
"""

import numpy as np
import pandas as pd
from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import f1_score, confusion_matrix
import matplotlib.pyplot as plt

#KNN using GridSearchCV for HYPERPARAMETER TUNING
def knn_with_gscv(x_train, y_train, x_test, y_test, n_neighbors_range=(1, 50)):
    knn = KNeighborsClassifier()
    param_grid = {'n_neighbors': np.arange(n_neighbors_range[0], n_neighbors_range[1])}
    gscv = GridSearchCV(knn, param_grid, cv=5, scoring='accuracy', n_jobs=4)
    gscv.fit(x_train, y_train)
    y_pred = gscv.predict(x_test)
    accuracy = metrics.accuracy_score(y_test, y_pred)

    return accuracy, gscv.best_estimator_, gscv.best_params_

#Load data from CSV's

x_train = pd.read_csv("./splitData/x_train.csv")
x_test = pd.read_csv("./splitData/x_test.csv")
y_train = pd.read_csv("./splitData/y_train.csv").squeeze()
y_test = pd.read_csv("./splitData/y_test.csv").squeeze()

#Train and print the accuracy
accuracy, knn_model, best_params = knn_with_gscv(x_train, y_train, x_test, y_test)
print("Accuracy:", accuracy)
print("Best Parameters:", best_params)

#F1 score
def compute_f1_score(model, x_test, y_test):
    y_pred = model.predict(x_test)
    return f1_score(y_test, y_pred, average='weighted')

#confusion matrix and save it to a file
def confusionMat(model, x_test, y_test, storeFile):
    y_pred = model.predict(x_test)
    arr = confusion_matrix(y_test, y_pred)

    fig = plt.figure()
    ax = fig.add_subplot(111)
    cax = ax.matshow(arr)
    plt.title('Confusion matrix of the classifier')
    fig.colorbar(cax)
    plt.xlabel('Predicted')
    plt.ylabel('True')

    for (i, j), z in np.ndenumerate(arr):
        ax.text(j, i, z, ha='center', va='center')

    with open(storeFile, 'wb') as file:
        fig.savefig(storeFile)
        print(f'Confusion Matrix Stored at {storeFile}!')

#Calculate F1 score and print it
f1 = compute_f1_score(knn_model, x_test, y_test)
print("F1 Score:", f1)

#Save confusion matrix to a file
confusionMat(knn_model, x_test, y_test, "./results/knn_confusion_matrix.png")
