# -*- coding: utf-8 -*-
"""Randomforests.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18JxRnDbLdDkiFpHwLNdndnaz02XB6y0_
"""

import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import f1_score, confusion_matrix
import matplotlib.pyplot as plt


#Random forests with GSCV Hyperparameters
def train_random_forest(X_train, y_train, X_test, y_test):
    rf = RandomForestClassifier(random_state=42)
    param_grid = {'n_estimators': [10, 50, 100, 200],
                  'max_depth': [None, 10, 20, 30],
                  'min_samples_split': [2, 5, 10],
                  'min_samples_leaf': [1, 2, 4]}
    grid_search = GridSearchCV(rf, param_grid, cv=5, scoring='accuracy')
    grid_search.fit(X_train, y_train)
    y_pred = grid_search.predict(X_test)
    accuracy = metrics.accuracy_score(y_test, y_pred)
    return accuracy, grid_search.best_estimator_


#F1 Scores
def calculate_f1_score(model, x_test, y_test):
    y_pred = model.predict(x_test)
    return f1_score(y_test, y_pred)


# Function to generate a confusion matrix and save it as an image

def plot_confusion_matrix(model, x_test, y_test, storeFile):
    y_pred = model.predict(x_test)
    arr = confusion_matrix(y_test, y_pred)
    
    fig = plt.figure()
    ax = fig.add_subplot(111)
    cax = ax.matshow(arr)
    plt.title('Confusion matrix of the classifier')
    fig.colorbar(cax)
    plt.xlabel('Predicted')
    plt.ylabel('True')
    
    for (i, j), z in np.ndenumerate(arr):
        ax.text(j, i, z, ha='center', va='center')
    
    fig.savefig(storeFile)
    print(f'Confusion Matrix Stored at {storeFile}!')




# Load data from the specified CSV
x_train = pd.read_csv("x_train.csv")
x_test = pd.read_csv("x_test.csv")
y_train = pd.read_csv("y_train.csv").squeeze()
y_test = pd.read_csv("y_test.csv").squeeze()

# Train Decision Tree and print accuracy
accuracy, rf_model = train_random_forest(x_train, y_train, x_test, y_test)
print("Accuracy:", accuracy)

# Calculate and print F1 score
f1 = calculate_f1_score(rf_model, x_test, y_test)
print("F1 Score:", f1)

# Generate confusion matrix and save it as an image
confusion_matrix_file = "./results/RF_confusion_matrix.png"
plot_confusion_matrix(rf_model, x_test, y_test, confusion_matrix_file)
